<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on 存留处</title>
    <link>https://ivkus.github.io/tags/cpp/</link>
    <description>Recent content in cpp on 存留处</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 May 2022 18:36:33 +0800</lastBuildDate>
    
	<atom:link href="https://ivkus.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【翻译】c&#43;&#43;类中“空成员”的优化</title>
      <link>https://ivkus.github.io/docs/cpp/cpp_emptyclass_opt/</link>
      <pubDate>Thu, 26 May 2022 18:36:33 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/cpp/cpp_emptyclass_opt/</guid>
      <description>&lt;p&gt;本文来自于&lt;a href=&#34;http://www.cantrip.org/emptyopt.html&#34;&gt;The &amp;ldquo;Empty Member&amp;rdquo; C++ Optimization&lt;/a&gt;。是我在看c++ std::string代码时遇到的一个链接，其中解释了为什么_Alloc_hider会采用inhert from Alloc的原因。&lt;/p&gt;
&lt;p&gt;文章应该是97年的，所以里面的指针长度还是4 byte。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>多线程交互的思考</title>
      <link>https://ivkus.github.io/docs/myth/thinking_in_multithread/</link>
      <pubDate>Sat, 21 Mar 2020 21:41:48 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/myth/thinking_in_multithread/</guid>
      <description>&lt;p&gt;最近开始写多线程的程序，整理一下对多线程代码的思考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeId in NS3</title>
      <link>https://ivkus.github.io/docs/osc/ns3_typeid/</link>
      <pubDate>Sun, 29 Jul 2018 23:23:55 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/osc/ns3_typeid/</guid>
      <description>&lt;p&gt;NS3作为一个网络仿真库，出于性能的考量选择了C++。在写仿真程序时，不可避免的要对各种实体进行建模，自然C++中的class成了唯一可选的方案。不加任何技巧的class的确可以满足对某些实体的建模，可是在仿真软件的编写中需要有足够的动态性，比如有这样一些需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态的获知某个实体所具有的各类属性与属性的值&lt;/li&gt;
&lt;li&gt;这个实体的状态变化后引发一系列的动作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些都不是过分的需求，如果真的写过仿真程序的话肯定会非常渴求使用的软件能够提供实现这些需求的方法。要自己干巴巴的实现这些需求也不是不可以，比如可以提供一些查询接口来实现1；对于2的话，Qt的signal/slot或许可以实现。说到Qt了，其实QObject拥有了超越普通C++ class的能力，也都能满足上面指出的这些需求，但是其解决方案似乎有点重。&lt;/p&gt;
&lt;p&gt;幸好，NS3通过TypeId可以很好的解决上面提出的各类需求。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>