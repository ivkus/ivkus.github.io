<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>存留处</title>
    <link>https://ivkus.github.io/</link>
    <description>Recent content on 存留处</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Jul 2022 22:58:05 +0800</lastBuildDate>
    
	<atom:link href="https://ivkus.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RxCpp</title>
      <link>https://ivkus.github.io/docs/osc/rxcpp/</link>
      <pubDate>Sun, 10 Jul 2022 22:58:05 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/osc/rxcpp/</guid>
      <description>&lt;p&gt;Reactive Programming似乎是已经过时了。&lt;/p&gt;
&lt;p&gt;初次接触的时候是在快毕业的时候，大概2017年。那时RxJava/RxAndroid配合网络库来做一些很fancy的重试、消除重复点击之类的任务，可以把代码写的异常的优雅。当时实际的编码量和项目经验不足，理解起来稍微困难了点。现在工作中也有了可以抽象成&lt;code&gt;stream&lt;/code&gt;的场景，看看能不能把这个库看明白点用在工作中。&lt;/p&gt;
&lt;p&gt;这里不会太关注rx的一些使用场景，更多关注一些稍微细节一些的实现，以帮助和梳理使用时对各个组件生命周期的把控。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logging On Linux</title>
      <link>https://ivkus.github.io/docs/notes/log_on_linux/</link>
      <pubDate>Tue, 31 May 2022 23:26:20 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/notes/log_on_linux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;简单回顾一些Linux上日志系统的一些背景，并配置一个rsyslog的日志结构化落db的系统。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>【翻译】Traits:一种新的而且有用的Template技巧</title>
      <link>https://ivkus.github.io/docs/cpp/traits/</link>
      <pubDate>Fri, 27 May 2022 10:15:38 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/cpp/traits/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;文章来自&lt;a href=&#34;http://www.cantrip.org/traits.html&#34;&gt;Traits: a new and useful template technique&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;应该是很老(1995)的文章了，不过很适合作为Template入门的材料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ANSI/ISO C++标准库一开始就想支持国际化(internationalization)，虽然一开始还没相好具体细节，但是最近5年逐渐有点眉目了。现在得到的结论是，应当用template来对需要进行字符操作的工具进行参数化。&lt;/p&gt;
&lt;p&gt;给现有的iostream和string类型进行参数化其实挺难的，需要发明一种新的技术才行。幸运的是，这种技术可以很好的服用在其他地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【翻译】c&#43;&#43;类中“空成员”的优化</title>
      <link>https://ivkus.github.io/docs/cpp/cpp_emptyclass_opt/</link>
      <pubDate>Thu, 26 May 2022 18:36:33 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/cpp/cpp_emptyclass_opt/</guid>
      <description>&lt;p&gt;本文来自于&lt;a href=&#34;http://www.cantrip.org/emptyopt.html&#34;&gt;The &amp;ldquo;Empty Member&amp;rdquo; C++ Optimization&lt;/a&gt;。是我在看c++ std::string代码时遇到的一个链接，其中解释了为什么_Alloc_hider会采用inhert from Alloc的原因。&lt;/p&gt;
&lt;p&gt;文章应该是97年的，所以里面的指针长度还是4 byte。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Systemd阅读笔记</title>
      <link>https://ivkus.github.io/docs/osc/systemd_read/</link>
      <pubDate>Thu, 24 Dec 2020 21:54:51 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/osc/systemd_read/</guid>
      <description>&lt;p&gt;Systemd的争议挺大的，不来看看大家为什么抵制它吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>多线程交互的思考</title>
      <link>https://ivkus.github.io/docs/myth/thinking_in_multithread/</link>
      <pubDate>Sat, 21 Mar 2020 21:41:48 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/myth/thinking_in_multithread/</guid>
      <description>&lt;p&gt;最近开始写多线程的程序，整理一下对多线程代码的思考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ASIO阅读笔记</title>
      <link>https://ivkus.github.io/docs/cpp/asio/</link>
      <pubDate>Mon, 20 Jan 2020 22:58:05 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/cpp/asio/</guid>
      <description>&lt;p&gt;&lt;code&gt;ASIO&lt;/code&gt;或许是最知名的C++网络库了吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Waf - a Python based build system</title>
      <link>https://ivkus.github.io/docs/osc/waf/</link>
      <pubDate>Fri, 26 Jul 2019 23:26:57 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/osc/waf/</guid>
      <description>&lt;p&gt;看懂这篇文章需要一点使用waf的经验，不过也不费事，看看例子也够了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeId in NS3</title>
      <link>https://ivkus.github.io/docs/osc/ns3_typeid/</link>
      <pubDate>Sun, 29 Jul 2018 23:23:55 +0800</pubDate>
      
      <guid>https://ivkus.github.io/docs/osc/ns3_typeid/</guid>
      <description>&lt;p&gt;NS3作为一个网络仿真库，出于性能的考量选择了C++。在写仿真程序时，不可避免的要对各种实体进行建模，自然C++中的class成了唯一可选的方案。不加任何技巧的class的确可以满足对某些实体的建模，可是在仿真软件的编写中需要有足够的动态性，比如有这样一些需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态的获知某个实体所具有的各类属性与属性的值&lt;/li&gt;
&lt;li&gt;这个实体的状态变化后引发一系列的动作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些都不是过分的需求，如果真的写过仿真程序的话肯定会非常渴求使用的软件能够提供实现这些需求的方法。要自己干巴巴的实现这些需求也不是不可以，比如可以提供一些查询接口来实现1；对于2的话，Qt的signal/slot或许可以实现。说到Qt了，其实QObject拥有了超越普通C++ class的能力，也都能满足上面指出的这些需求，但是其解决方案似乎有点重。&lt;/p&gt;
&lt;p&gt;幸好，NS3通过TypeId可以很好的解决上面提出的各类需求。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>